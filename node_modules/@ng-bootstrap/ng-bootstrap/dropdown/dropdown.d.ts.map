{"version":3,"file":"dropdown.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/dropdown/dropdown.d.ts"],"sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges } from '@angular/core';\nimport { Placement, PlacementArray } from '../util/positioning';\nimport { NgbDropdownConfig } from './dropdown-config';\n/**\n * A directive you should put put on a dropdown item to enable keyboard navigation.\n * Keyboard navigation using arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\nexport declare class NgbDropdownItem {\n    elementRef: ElementRef<HTMLElement>;\n    private _disabled;\n    disabled: boolean;\n    constructor(elementRef: ElementRef<HTMLElement>);\n}\n/**\n */\nexport declare class NgbDropdownMenu {\n    dropdown: any;\n    private _elementRef;\n    private _renderer;\n    placement: Placement;\n    isOpen: boolean;\n    menuItems: QueryList<NgbDropdownItem>;\n    constructor(dropdown: any, _elementRef: ElementRef<HTMLElement>, _renderer: Renderer2);\n    getNativeElement(): HTMLElement;\n    position(triggerEl: any, placement: any): void;\n    applyPlacement(_placement: Placement): void;\n}\n/**\n * Marks an element to which dropdown menu will be anchored. This is a simple version\n * of the NgbDropdownToggle directive. It plays the same role as NgbDropdownToggle but\n * doesn't listen to click events to toggle dropdown menu thus enabling support for\n * events other than click.\n *\n * @since 1.1.0\n */\nexport declare class NgbDropdownAnchor {\n    dropdown: any;\n    private _elementRef;\n    anchorEl: any;\n    constructor(dropdown: any, _elementRef: ElementRef<HTMLElement>);\n    getNativeElement(): HTMLElement;\n}\n/**\n * Allows the dropdown to be toggled via click. This directive is optional: you can use NgbDropdownAnchor as an\n * alternative.\n */\nexport declare class NgbDropdownToggle extends NgbDropdownAnchor {\n    constructor(dropdown: any, elementRef: ElementRef<HTMLElement>);\n    toggleOpen(): void;\n}\n/**\n * Transforms a node into a dropdown.\n */\nexport declare class NgbDropdown implements OnInit, OnDestroy {\n    private _changeDetector;\n    private _document;\n    private _ngZone;\n    private _elementRef;\n    private _renderer;\n    private _closed$;\n    private _zoneSubscription;\n    private _bodyContainer;\n    private _menu;\n    private _menuElement;\n    private _anchor;\n    /**\n     * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n     * When it is true (default) dropdowns are automatically closed on both outside and inside (menu) clicks.\n     * When it is false dropdowns are never automatically closed.\n     * When it is 'outside' dropdowns are automatically closed on outside clicks but not on menu clicks.\n     * When it is 'inside' dropdowns are automatically on menu clicks but not on outside clicks.\n     */\n    autoClose: boolean | 'outside' | 'inside';\n    /**\n     *  Defines whether or not the dropdown-menu is open initially.\n     */\n    _open: boolean;\n    /**\n     * Placement of a popover accepts:\n     *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n     *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n     *  array or a space separated string of above values\n     */\n    placement: PlacementArray;\n    /**\n     * A selector specifying the element the dropdown should be appended to.\n     * Currently only supports \"body\".\n     *\n     * @since 4.1.0\n     */\n    container: null | 'body';\n    /**\n     *  An event fired when the dropdown is opened or closed.\n     *  Event's payload equals whether dropdown is open.\n     */\n    openChange: EventEmitter<{}>;\n    constructor(_changeDetector: ChangeDetectorRef, config: NgbDropdownConfig, _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _renderer: Renderer2);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Checks if the dropdown menu is open or not.\n     */\n    isOpen(): boolean;\n    /**\n     * Opens the dropdown menu of a given navbar or tabbed navigation.\n     */\n    open(): void;\n    private _setCloseHandlers;\n    /**\n     * Closes the dropdown menu of a given navbar or tabbed navigation.\n     */\n    close(): void;\n    /**\n     * Toggles the dropdown menu of a given navbar or tabbed navigation.\n     */\n    toggle(): void;\n    ngOnDestroy(): void;\n    onKeyDown(event: KeyboardEvent): void;\n    private _isDropup;\n    private _isEventFromToggle;\n    private _getMenuElements;\n    private _positionMenu;\n    private _resetContainer;\n    private _applyContainer;\n    private _applyPlacementClasses;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;AAKA;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;"}