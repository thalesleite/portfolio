{"version":3,"file":"accordion.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/accordion/accordion.d.ts"],"sourcesContent":["import { AfterContentChecked, EventEmitter, QueryList, TemplateRef } from '@angular/core';\nimport { NgbAccordionConfig } from './accordion-config';\n/**\n * A context for the `NgbPanelHeader` template\n *\n * @since 4.1.0\n */\nexport interface NgbPanelHeaderContext {\n    /**\n     * True if current panel is opened\n     */\n    opened: boolean;\n}\n/**\n * A directive to put on a button that toggles panel opening and closing.\n * To be used inside the `NgbPanelHeader`\n *\n * @since 4.1.0\n */\nexport declare class NgbPanelToggle {\n    accordion: NgbAccordion;\n    panel: NgbPanel;\n    ngbPanelToggle: NgbPanel;\n    constructor(accordion: NgbAccordion, panel: NgbPanel);\n}\n/**\n * A directive to wrap an accordion panel header to contain any HTML markup and a toggling button with `NgbPanelToggle`\n *\n * @since 4.1.0\n */\nexport declare class NgbPanelHeader {\n    templateRef: TemplateRef<any>;\n    constructor(templateRef: TemplateRef<any>);\n}\n/**\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\n */\nexport declare class NgbPanelTitle {\n    templateRef: TemplateRef<any>;\n    constructor(templateRef: TemplateRef<any>);\n}\n/**\n * This directive must be used to wrap accordion panel content.\n */\nexport declare class NgbPanelContent {\n    templateRef: TemplateRef<any>;\n    constructor(templateRef: TemplateRef<any>);\n}\n/**\n * The NgbPanel directive represents an individual panel with the title and collapsible\n * content\n */\nexport declare class NgbPanel implements AfterContentChecked {\n    /**\n     *  A flag determining whether the panel is disabled or not.\n     *  When disabled, the panel cannot be toggled.\n     */\n    disabled: boolean;\n    /**\n     *  An optional id for the panel. The id should be unique.\n     *  If not provided, it will be auto-generated.\n     */\n    id: string;\n    /**\n     * A flag telling if the panel is currently open\n     */\n    isOpen: boolean;\n    /**\n     *  The title for the panel.\n     */\n    title: string;\n    /**\n     *  Accordion's types of panels to be applied per panel basis.\n     *  Bootstrap recognizes the following types: \"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\"\n     * and \"dark\"\n     */\n    type: string;\n    titleTpl: NgbPanelTitle | null;\n    headerTpl: NgbPanelHeader | null;\n    contentTpl: NgbPanelContent | null;\n    titleTpls: QueryList<NgbPanelTitle>;\n    headerTpls: QueryList<NgbPanelHeader>;\n    contentTpls: QueryList<NgbPanelContent>;\n    ngAfterContentChecked(): void;\n}\n/**\n * The payload of the change event fired right before toggling an accordion panel\n */\nexport interface NgbPanelChangeEvent {\n    /**\n     * Id of the accordion panel that is toggled\n     */\n    panelId: string;\n    /**\n     * Whether the panel will be opened (true) or closed (false)\n     */\n    nextState: boolean;\n    /**\n     * Function that will prevent panel toggling if called\n     */\n    preventDefault: () => void;\n}\n/**\n * The NgbAccordion directive is a collection of panels.\n * It can assure that only one panel can be opened at a time.\n */\nexport declare class NgbAccordion implements AfterContentChecked {\n    panels: QueryList<NgbPanel>;\n    /**\n     * An array or comma separated strings of panel identifiers that should be opened\n     */\n    activeIds: string | string[];\n    /**\n     *  Whether the other panels should be closed when a panel is opened\n     */\n    closeOtherPanels: boolean;\n    /**\n     * Whether the closed panels should be hidden without destroying them\n     */\n    destroyOnHide: boolean;\n    /**\n     *  Accordion's types of panels to be applied globally.\n     *  Bootstrap recognizes the following types: \"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\"\n     * and \"dark\n     */\n    type: string;\n    /**\n     * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\n     */\n    panelChange: EventEmitter<NgbPanelChangeEvent>;\n    constructor(config: NgbAccordionConfig);\n    /**\n     * Checks if a panel with a given id is expanded or not.\n     */\n    isExpanded(panelId: string): boolean;\n    /**\n     * Expands a panel with a given id. Has no effect if the panel is already expanded or disabled.\n     */\n    expand(panelId: string): void;\n    /**\n     * Expands all panels if [closeOthers]=\"false\". For the [closeOthers]=\"true\" case will have no effect if there is an\n     * open panel, otherwise the first panel will be expanded.\n     */\n    expandAll(): void;\n    /**\n     * Collapses a panel with a given id. Has no effect if the panel is already collapsed or disabled.\n     */\n    collapse(panelId: string): void;\n    /**\n     * Collapses all open panels.\n     */\n    collapseAll(): void;\n    /**\n     * Programmatically toggle a panel with a given id. Has no effect if the panel is disabled.\n     */\n    toggle(panelId: string): void;\n    ngAfterContentChecked(): void;\n    private _changeOpenState;\n    private _closeOthers;\n    private _findPanelById;\n    private _updateActiveIds;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AASA;;;;;;;;;AAOA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;"}