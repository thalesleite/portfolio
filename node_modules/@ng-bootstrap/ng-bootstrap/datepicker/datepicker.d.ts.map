{"version":3,"file":"datepicker.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker.d.ts"],"sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NgbCalendar } from './ngb-calendar';\nimport { NgbDate } from './ngb-date';\nimport { NgbDatepickerService } from './datepicker-service';\nimport { NgbDatepickerKeyMapService } from './datepicker-keymap-service';\nimport { DatepickerViewModel, NavigationEvent } from './datepicker-view-model';\nimport { DayTemplateContext } from './datepicker-day-template-context';\nimport { NgbDatepickerConfig } from './datepicker-config';\nimport { NgbDateAdapter } from './adapters/ngb-date-adapter';\nimport { NgbDateStruct } from './ngb-date-struct';\nimport { NgbDatepickerI18n } from './datepicker-i18n';\n/**\n * The payload of the datepicker navigation event\n */\nexport interface NgbDatepickerNavigateEvent {\n    /**\n     * Currently displayed month\n     */\n    current: {\n        year: number;\n        month: number;\n    };\n    /**\n     * Month we're navigating to\n     */\n    next: {\n        year: number;\n        month: number;\n    };\n    /**\n     * Function that will prevent navigation if called\n     *\n     * @since 4.1.0\n     */\n    preventDefault: () => void;\n}\n/**\n * A lightweight and highly configurable datepicker directive\n */\nexport declare class NgbDatepicker implements OnDestroy, OnChanges, OnInit, ControlValueAccessor {\n    private _keyMapService;\n    _service: NgbDatepickerService;\n    private _calendar;\n    i18n: NgbDatepickerI18n;\n    private _cd;\n    private _elementRef;\n    private _ngbDateAdapter;\n    private _ngZone;\n    model: DatepickerViewModel;\n    private _monthsEl;\n    private _controlValue;\n    private _destroyed$;\n    /**\n     * Reference for the custom template for the day display\n     */\n    dayTemplate: TemplateRef<DayTemplateContext>;\n    /**\n     * Callback to pass any arbitrary data to the custom day template context\n     * 'Current' contains the month that will be displayed in the view\n     *\n     * @since 3.3.0\n     */\n    dayTemplateData: (date: NgbDate, current: {\n        year: number;\n        month: number;\n    }) => any;\n    /**\n     * Number of months to display\n     */\n    displayMonths: number;\n    /**\n     * First day of the week. With default calendar we use ISO 8601: 'weekday' is 1=Mon ... 7=Sun\n     */\n    firstDayOfWeek: number;\n    /**\n     * Reference for the custom template for the footer\n     *\n     * @since 3.3.0\n     */\n    footerTemplate: TemplateRef<any>;\n    /**\n     * Callback to mark a given date as disabled.\n     * 'Current' contains the month that will be displayed in the view\n     */\n    markDisabled: (date: NgbDate, current: {\n        year: number;\n        month: number;\n    }) => boolean;\n    /**\n     * Max date for the navigation. If not provided, 'year' select box will display 10 years after current month\n     */\n    maxDate: NgbDateStruct;\n    /**\n     * Min date for the navigation. If not provided, 'year' select box will display 10 years before current month\n     */\n    minDate: NgbDateStruct;\n    /**\n     * Navigation type: `select` (default with select boxes for month and year), `arrows`\n     * (without select boxes, only navigation arrows) or `none` (no navigation at all)\n     */\n    navigation: 'select' | 'arrows' | 'none';\n    /**\n     * The way to display days that don't belong to current month: `visible` (default),\n     * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n     */\n    outsideDays: 'visible' | 'collapsed' | 'hidden';\n    /**\n     * Whether to display days of the week\n     */\n    showWeekdays: boolean;\n    /**\n     * Whether to display week numbers\n     */\n    showWeekNumbers: boolean;\n    /**\n     * Date to open calendar with.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided, calendar will open with current month.\n     * Use 'navigateTo(date)' as an alternative\n     */\n    startDate: {\n        year: number;\n        month: number;\n        day?: number;\n    };\n    /**\n     * An event fired right before the navigation happens and currently displayed month changes.\n     * See NgbDatepickerNavigateEvent for the payload info.\n     */\n    navigate: EventEmitter<NgbDatepickerNavigateEvent>;\n    /**\n     * An event fired when user selects a date using keyboard or mouse.\n     * The payload of the event is currently selected NgbDate.\n     */\n    select: EventEmitter<NgbDate>;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    constructor(_keyMapService: NgbDatepickerKeyMapService, _service: NgbDatepickerService, _calendar: NgbCalendar, i18n: NgbDatepickerI18n, config: NgbDatepickerConfig, _cd: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, _ngbDateAdapter: NgbDateAdapter<any>, _ngZone: NgZone);\n    /**\n     * Manually focus the focusable day in the datepicker\n     */\n    focus(): void;\n    /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     */\n    navigateTo(date?: {\n        year: number;\n        month: number;\n        day?: number;\n    }): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    onDateSelect(date: NgbDate): void;\n    onKeyDown(event: KeyboardEvent): void;\n    onNavigateDateSelect(date: NgbDate): void;\n    onNavigateEvent(event: NavigationEvent): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n    writeValue(value: any): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuJA;"}