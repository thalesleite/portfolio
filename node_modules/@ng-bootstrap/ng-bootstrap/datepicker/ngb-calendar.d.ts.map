{"version":3,"file":"ngb-calendar.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar.d.ts"],"sourcesContent":["import { NgbDate } from './ngb-date';\nexport declare function fromJSDate(jsDate: Date): NgbDate;\nexport declare function toJSDate(date: NgbDate): Date;\nexport declare type NgbPeriod = 'y' | 'm' | 'd';\nexport declare function NGB_DATEPICKER_CALENDAR_FACTORY(): NgbCalendarGregorian;\n/**\n * Calendar used by the datepicker.\n * Default implementation uses Gregorian calendar.\n */\nexport declare abstract class NgbCalendar {\n    /**\n     * Returns number of days per week.\n     */\n    abstract getDaysPerWeek(): number;\n    /**\n     * Returns an array of months per year.\n     * With default calendar we use ISO 8601 and return [1, 2, ..., 12];\n     */\n    abstract getMonths(year?: number): number[];\n    /**\n     * Returns number of weeks per month.\n     */\n    abstract getWeeksPerMonth(): number;\n    /**\n     * Returns weekday number for a given day.\n     * With default calendar we use ISO 8601: 'weekday' is 1=Mon ... 7=Sun\n     */\n    abstract getWeekday(date: NgbDate): number;\n    /**\n     * Adds a number of years, months or days to a given date.\n     * Period can be 'y', 'm' or 'd' and defaults to day.\n     * Number defaults to 1.\n     */\n    abstract getNext(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\n    /**\n     * Subtracts a number of years, months or days from a given date.\n     * Period can be 'y', 'm' or 'd' and defaults to day.\n     * Number defaults to 1.\n     */\n    abstract getPrev(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\n    /**\n     * Returns week number for a given week.\n     */\n    abstract getWeekNumber(week: NgbDate[], firstDayOfWeek: number): number;\n    /**\n     * Returns today's date.\n     */\n    abstract getToday(): NgbDate;\n    /**\n     * Checks if a date is valid for a current calendar.\n     */\n    abstract isValid(date: NgbDate): boolean;\n}\nexport declare class NgbCalendarGregorian extends NgbCalendar {\n    getDaysPerWeek(): number;\n    getMonths(): number[];\n    getWeeksPerMonth(): number;\n    getNext(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\n    getPrev(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\n    getWeekday(date: NgbDate): number;\n    getWeekNumber(week: NgbDate[], firstDayOfWeek: number): number;\n    getToday(): NgbDate;\n    isValid(date: NgbDate): boolean;\n}\n"],"names":[],"mappings":"AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;;;;;;;;;AAWA;"}