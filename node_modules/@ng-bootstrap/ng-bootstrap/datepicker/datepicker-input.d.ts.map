{"version":3,"file":"datepicker-input.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-input.d.ts"],"sourcesContent":["import { ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { PlacementArray } from '../util/positioning';\nimport { NgbDateAdapter } from './adapters/ngb-date-adapter';\nimport { NgbDatepickerNavigateEvent } from './datepicker';\nimport { DayTemplateContext } from './datepicker-day-template-context';\nimport { NgbDatepickerService } from './datepicker-service';\nimport { NgbCalendar } from './ngb-calendar';\nimport { NgbDate } from './ngb-date';\nimport { NgbDateParserFormatter } from './ngb-date-parser-formatter';\nimport { NgbDateStruct } from './ngb-date-struct';\n/**\n * A directive that makes it possible to have datepickers on input fields.\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\n */\nexport declare class NgbInputDatepicker implements OnChanges, OnDestroy, ControlValueAccessor, Validator {\n    private _parserFormatter;\n    private _elRef;\n    private _vcRef;\n    private _renderer;\n    private _cfr;\n    private _ngZone;\n    private _service;\n    private _calendar;\n    private _dateAdapter;\n    private _document;\n    private _changeDetector;\n    private _closed$;\n    private _cRef;\n    private _disabled;\n    private _model;\n    private _inputValue;\n    private _zoneSubscription;\n    /**\n     * Indicates whether the datepicker popup should be closed automatically after date selection / outside click or not.\n     *\n     * By default the popup will close on both date selection and outside click. If the value is 'false' the popup has to\n     * be closed manually via '.close()' or '.toggle()' methods. If the value is set to 'inside' the popup will close on\n     * date selection only. For the 'outside' the popup will close only on the outside click.\n     *\n     * @since 3.0.0\n     */\n    autoClose: boolean | 'inside' | 'outside';\n    /**\n     * Reference for the custom template for the day display\n     */\n    dayTemplate: TemplateRef<DayTemplateContext>;\n    /**\n     * Callback to pass any arbitrary data to the custom day template context\n     * 'Current' contains the month that will be displayed in the view\n     *\n     * @since 3.3.0\n     */\n    dayTemplateData: (date: NgbDate, current: {\n        year: number;\n        month: number;\n    }) => any;\n    /**\n     * Number of months to display\n     */\n    displayMonths: number;\n    /**\n     * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\n     */\n    firstDayOfWeek: number;\n    /**\n     * Reference for the custom template for the footer inside datepicker\n     *\n     * @since 3.3.0\n     */\n    footerTemplate: TemplateRef<any>;\n    /**\n     * Callback to mark a given date as disabled.\n     * 'Current' contains the month that will be displayed in the view\n     */\n    markDisabled: (date: NgbDate, current: {\n        year: number;\n        month: number;\n    }) => boolean;\n    /**\n     * Min date for the navigation. If not provided will be 10 years before today or `startDate`\n     */\n    minDate: NgbDateStruct;\n    /**\n     * Max date for the navigation. If not provided will be 10 years from today or `startDate`\n     */\n    maxDate: NgbDateStruct;\n    /**\n     * Navigation type: `select` (default with select boxes for month and year), `arrows`\n     * (without select boxes, only navigation arrows) or `none` (no navigation at all)\n     */\n    navigation: 'select' | 'arrows' | 'none';\n    /**\n     * The way to display days that don't belong to current month: `visible` (default),\n     * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n     */\n    outsideDays: 'visible' | 'collapsed' | 'hidden';\n    /**\n     * Placement of a datepicker popup accepts:\n     *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n     *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n     *  array or a space separated string of above values\n     */\n    placement: PlacementArray;\n    /**\n     * Whether to display days of the week\n     */\n    showWeekdays: boolean;\n    /**\n     * Whether to display week numbers\n     */\n    showWeekNumbers: boolean;\n    /**\n     * Date to open calendar with.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided, calendar will open with current month.\n     * Use 'navigateTo(date)' as an alternative\n     */\n    startDate: {\n        year: number;\n        month: number;\n        day?: number;\n    };\n    /**\n     * A selector specifying the element the datepicker popup should be appended to.\n     * Currently only supports \"body\".\n     */\n    container: string;\n    /**\n     * An event fired when user selects a date using keyboard or mouse.\n     * The payload of the event is currently selected NgbDate.\n     *\n     * @since 1.1.1\n     */\n    dateSelect: EventEmitter<NgbDate>;\n    /**\n     * An event fired when navigation happens and currently displayed month changes.\n     * See NgbDatepickerNavigateEvent for the payload info.\n     */\n    navigate: EventEmitter<NgbDatepickerNavigateEvent>;\n    disabled: any;\n    private _onChange;\n    private _onTouched;\n    private _validatorChange;\n    constructor(_parserFormatter: NgbDateParserFormatter, _elRef: ElementRef<HTMLInputElement>, _vcRef: ViewContainerRef, _renderer: Renderer2, _cfr: ComponentFactoryResolver, _ngZone: NgZone, _service: NgbDatepickerService, _calendar: NgbCalendar, _dateAdapter: NgbDateAdapter<any>, _document: any, _changeDetector: ChangeDetectorRef);\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    validate(c: AbstractControl): {\n        [key: string]: any;\n    };\n    writeValue(value: any): void;\n    manualDateChange(value: string, updateView?: boolean): void;\n    isOpen(): boolean;\n    /**\n     * Opens the datepicker with the selected date indicated by the ngModel value.\n     */\n    open(): void;\n    /**\n     * Closes the datepicker popup.\n     */\n    close(): void;\n    /**\n     * Toggles the datepicker popup (opens when closed and closes when opened).\n     */\n    toggle(): void;\n    /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     */\n    navigateTo(date?: {\n        year: number;\n        month: number;\n        day?: number;\n    }): void;\n    onBlur(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private _applyDatepickerInputs;\n    private _applyPopupStyling;\n    private _subscribeForDatepickerOutputs;\n    private _writeModelValue;\n    private _fromDateStruct;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA;"}