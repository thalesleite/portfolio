{"version":3,"file":"rating.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/rating/rating.d.ts"],"sourcesContent":["import { EventEmitter, OnInit, TemplateRef, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { NgbRatingConfig } from './rating-config';\nimport { ControlValueAccessor } from '@angular/forms';\n/**\n * Context for the custom star display template\n */\nexport interface StarTemplateContext {\n    /**\n     * Star fill percentage. An integer value between 0 and 100\n     */\n    fill: number;\n    /**\n     * Index of the star.\n     */\n    index: number;\n}\n/**\n * Rating directive that will take care of visualising a star rating bar.\n */\nexport declare class NgbRating implements ControlValueAccessor, OnInit, OnChanges {\n    private _changeDetectorRef;\n    contexts: StarTemplateContext[];\n    disabled: boolean;\n    nextRate: number;\n    /**\n     * Maximal rating that can be given using this widget.\n     */\n    max: number;\n    /**\n     * Current rating. Can be a decimal value like 3.75\n     */\n    rate: number;\n    /**\n     * A flag indicating if rating can be updated.\n     */\n    readonly: boolean;\n    /**\n     * A flag indicating if rating can be reset to 0 on mouse click\n     */\n    resettable: boolean;\n    /**\n     * A template to override star display.\n     * Alternatively put a <ng-template> as the only child of <ngb-rating> element\n     */\n    starTemplate: TemplateRef<StarTemplateContext>;\n    starTemplateFromContent: TemplateRef<StarTemplateContext>;\n    /**\n     * An event fired when a user is hovering over a given rating.\n     * Event's payload equals to the rating being hovered over.\n     */\n    hover: EventEmitter<number>;\n    /**\n     * An event fired when a user stops hovering over a given rating.\n     * Event's payload equals to the rating of the last item being hovered over.\n     */\n    leave: EventEmitter<number>;\n    /**\n     * An event fired when a user selects a new rating.\n     * Event's payload equals to the newly selected rating.\n     */\n    rateChange: EventEmitter<number>;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    constructor(config: NgbRatingConfig, _changeDetectorRef: ChangeDetectorRef);\n    ariaValueText(): string;\n    enter(value: number): void;\n    handleBlur(): void;\n    handleClick(value: number): void;\n    handleKeyDown(event: KeyboardEvent): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    reset(): void;\n    setDisabledState(isDisabled: boolean): void;\n    update(value: number, internalChange?: boolean): void;\n    writeValue(value: any): void;\n    private _getFillValue;\n    private _updateState;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;"}