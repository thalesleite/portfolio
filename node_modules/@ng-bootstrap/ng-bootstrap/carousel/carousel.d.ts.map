{"version":3,"file":"carousel.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/carousel/carousel.d.ts"],"sourcesContent":["import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, EventEmitter, NgZone, OnChanges, OnDestroy, QueryList, TemplateRef } from '@angular/core';\nimport { NgbCarouselConfig } from './carousel-config';\n/**\n * Represents an individual slide to be used within a carousel.\n */\nexport declare class NgbSlide {\n    tplRef: TemplateRef<any>;\n    /**\n     * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n     * Will be auto-generated if not provided.\n     */\n    id: string;\n    constructor(tplRef: TemplateRef<any>);\n}\n/**\n * Directive to easily create carousels based on Bootstrap's markup.\n */\nexport declare class NgbCarousel implements AfterContentChecked, AfterContentInit, OnChanges, OnDestroy {\n    private _platformId;\n    private _ngZone;\n    private _cd;\n    slides: QueryList<NgbSlide>;\n    private _destroy$;\n    private _start$;\n    private _stop$;\n    /**\n     * The active slide id.\n     */\n    activeId: string;\n    /**\n     * Amount of time in milliseconds before next slide is shown.\n     */\n    interval: number;\n    /**\n     * Whether can wrap from the last to the first slide.\n     */\n    wrap: boolean;\n    /**\n     * A flag for allowing navigation via keyboard\n     */\n    keyboard: boolean;\n    /**\n     * A flag to enable slide cycling pause/resume on mouseover.\n     * @since 2.2.0\n     */\n    pauseOnHover: boolean;\n    /**\n     * A flag to show / hide navigation arrows.\n     * @since 2.2.0\n     */\n    showNavigationArrows: boolean;\n    /**\n     * A flag to show / hide navigation indicators.\n     * @since 2.2.0\n     */\n    showNavigationIndicators: boolean;\n    /**\n     * A carousel slide event fired when the slide transition is completed.\n     * See NgbSlideEvent for payload details\n     */\n    slide: EventEmitter<NgbSlideEvent>;\n    constructor(config: NgbCarouselConfig, _platformId: any, _ngZone: NgZone, _cd: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: any): void;\n    /**\n     * Navigate to a slide with the specified identifier.\n     */\n    select(slideId: string): void;\n    /**\n     * Navigate to the next slide.\n     */\n    prev(): void;\n    /**\n     * Navigate to the next slide.\n     */\n    next(): void;\n    /**\n     * Stops the carousel from cycling through items.\n     */\n    pause(): void;\n    /**\n     * Restarts cycling through the carousel slides from left to right.\n     */\n    cycle(): void;\n    private _cycleToSelected;\n    private _getSlideEventDirection;\n    private _getSlideById;\n    private _getSlideIdxById;\n    private _getNextSlide;\n    private _getPrevSlide;\n}\n/**\n * The payload of the slide event fired when the slide transition is completed\n */\nexport interface NgbSlideEvent {\n    /**\n     * Previous slide id\n     */\n    prev: string;\n    /**\n     * New slide ids\n     */\n    current: string;\n    /**\n     * Slide event direction\n     */\n    direction: NgbSlideEventDirection;\n}\n/**\n * Enum to define the carousel slide event direction\n */\nexport declare enum NgbSlideEventDirection {\n    LEFT,\n    RIGHT\n}\nexport declare const NGB_CAROUSEL_DIRECTIVES: (typeof NgbSlide | typeof NgbCarousel)[];\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;;;;;;;;;;;;;;;;;;;;;;;;;"}