{"version":3,"file":"tabset.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/tabset/tabset.d.ts"],"sourcesContent":["import { QueryList, TemplateRef, AfterContentChecked, EventEmitter } from '@angular/core';\nimport { NgbTabsetConfig } from './tabset-config';\n/**\n * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.\n */\nexport declare class NgbTabTitle {\n    templateRef: TemplateRef<any>;\n    constructor(templateRef: TemplateRef<any>);\n}\n/**\n * This directive must be used to wrap content to be displayed in a tab.\n */\nexport declare class NgbTabContent {\n    templateRef: TemplateRef<any>;\n    constructor(templateRef: TemplateRef<any>);\n}\n/**\n * A directive representing an individual tab.\n */\nexport declare class NgbTab {\n    /**\n     * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n     */\n    id: string;\n    /**\n     * Simple (string only) title. Use the \"NgbTabTitle\" directive for more complex use-cases.\n     */\n    title: string;\n    /**\n     * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n     */\n    disabled: boolean;\n    titleTpl: NgbTabTitle | null;\n    contentTpl: NgbTabContent | null;\n    titleTpls: QueryList<NgbTabTitle>;\n    contentTpls: QueryList<NgbTabContent>;\n    ngAfterContentChecked(): void;\n}\n/**\n * The payload of the change event fired right before the tab change\n */\nexport interface NgbTabChangeEvent {\n    /**\n     * Id of the currently active tab\n     */\n    activeId: string;\n    /**\n     * Id of the newly selected tab\n     */\n    nextId: string;\n    /**\n     * Function that will prevent tab switch if called\n     */\n    preventDefault: () => void;\n}\n/**\n * A component that makes it easy to create tabbed interface.\n */\nexport declare class NgbTabset implements AfterContentChecked {\n    justifyClass: string;\n    tabs: QueryList<NgbTab>;\n    /**\n     * An identifier of an initially selected (active) tab. Use the \"select\" method to switch a tab programmatically.\n     */\n    activeId: string;\n    /**\n     * Whether the closed tabs should be hidden without destroying them\n     */\n    destroyOnHide: boolean;\n    /**\n     * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or\n     * 'justified'\n     * The default value is 'start'.\n     */\n    justify: 'start' | 'center' | 'end' | 'fill' | 'justified';\n    /**\n     * The orientation of the nav (horizontal or vertical).\n     * The default value is 'horizontal'.\n     */\n    orientation: 'horizontal' | 'vertical';\n    /**\n     * Type of navigation to be used for tabs. Can be one of Bootstrap defined types ('tabs' or 'pills').\n     * Since 3.0.0 can also be an arbitrary string (for custom themes).\n     */\n    type: 'tabs' | 'pills' | string;\n    /**\n     * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n     */\n    tabChange: EventEmitter<NgbTabChangeEvent>;\n    constructor(config: NgbTabsetConfig);\n    /**\n     * Selects the tab with the given id and shows its associated pane.\n     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n     */\n    select(tabId: string): void;\n    ngAfterContentChecked(): void;\n    private _getTabById;\n}\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;AAGA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;"}