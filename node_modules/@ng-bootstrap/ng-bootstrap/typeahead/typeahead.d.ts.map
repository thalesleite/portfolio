{"version":3,"file":"typeahead.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead.d.ts"],"sourcesContent":["import { ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, NgZone, OnDestroy, OnInit, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { Live } from '../util/accessibility/live';\nimport { PlacementArray } from '../util/positioning';\nimport { NgbTypeaheadConfig } from './typeahead-config';\nimport { ResultTemplateContext } from './typeahead-window';\n/**\n * Payload of the selectItem event.\n */\nexport interface NgbTypeaheadSelectItemEvent {\n    /**\n     * An item about to be selected\n     */\n    item: any;\n    /**\n     * Function that will prevent item selection if called\n     */\n    preventDefault: () => void;\n}\n/**\n * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input\n */\nexport declare class NgbTypeahead implements ControlValueAccessor, OnInit, OnDestroy {\n    private _elementRef;\n    private _viewContainerRef;\n    private _renderer;\n    private _injector;\n    private _live;\n    private _document;\n    private _ngZone;\n    private _changeDetector;\n    private _popupService;\n    private _subscription;\n    private _closed$;\n    private _inputValueBackup;\n    private _valueChanges;\n    private _resubscribeTypeahead;\n    private _windowRef;\n    private _zoneSubscription;\n    /**\n     * Value for the configurable autocomplete attribute.\n     * Defaults to 'off' to disable the native browser autocomplete, but this standard value does not seem\n     * to be always correctly taken into account.\n     *\n     * @since 2.1.0\n     */\n    autocomplete: string;\n    /**\n     * A selector specifying the element the tooltip should be appended to.\n     * Currently only supports \"body\".\n     */\n    container: string;\n    /**\n     * A flag indicating if model values should be restricted to the ones selected from the popup only.\n     */\n    editable: boolean;\n    /**\n     * A flag indicating if the first match should automatically be focused as you type.\n     */\n    focusFirst: boolean;\n    /**\n     * A function to convert a given value into string to display in the input field\n     */\n    inputFormatter: (value: any) => string;\n    /**\n     * A function to transform the provided observable text into the array of results.  Note that the \"this\" argument\n     * is undefined so you need to explicitly bind it to a desired \"this\" target.\n     */\n    ngbTypeahead: (text: Observable<string>) => Observable<any[]>;\n    /**\n     * A function to format a given result before display. This function should return a formatted string without any\n     * HTML markup\n     */\n    resultFormatter: (value: any) => string;\n    /**\n     * A template to override a matching result default display\n     */\n    resultTemplate: TemplateRef<ResultTemplateContext>;\n    /**\n     * Show hint when an option in the result list matches.\n     */\n    showHint: boolean;\n    /** Placement of a typeahead accepts:\n     *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n     *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n     *  array or a space separated string of above values\n    */\n    placement: PlacementArray;\n    /**\n     * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.\n     */\n    selectItem: EventEmitter<NgbTypeaheadSelectItemEvent>;\n    activeDescendant: string;\n    popupId: string;\n    private _onTouched;\n    private _onChange;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _viewContainerRef: ViewContainerRef, _renderer: Renderer2, _injector: Injector, componentFactoryResolver: ComponentFactoryResolver, config: NgbTypeaheadConfig, ngZone: NgZone, _live: Live, _document: any, _ngZone: NgZone, _changeDetector: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    writeValue(value: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Dismisses typeahead popup window\n     */\n    dismissPopup(): void;\n    /**\n     * Returns true if the typeahead popup window is displayed\n     */\n    isPopupOpen(): boolean;\n    handleBlur(): void;\n    handleKeyDown(event: KeyboardEvent): void;\n    private _openPopup;\n    private _closePopup;\n    private _selectResult;\n    private _selectResultClosePopup;\n    private _showHint;\n    private _formatItemForInput;\n    private _writeInputValue;\n    private _subscribeToUserInput;\n    private _unsubscribeFromUserInput;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;"}