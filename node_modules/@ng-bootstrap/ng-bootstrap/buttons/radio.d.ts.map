{"version":3,"file":"radio.d.ts","sources":["/Users/jediblue/Workspace/projects/js/angular/thales-leite/node_modules/@ng-bootstrap/ng-bootstrap/buttons/radio.d.ts"],"sourcesContent":["import { ChangeDetectorRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NgbButtonLabel } from './label';\n/**\n * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\n * specified via ngModel.\n */\nexport declare class NgbRadioGroup implements ControlValueAccessor {\n    private _radios;\n    private _value;\n    private _disabled;\n    disabled: boolean;\n    /**\n     * The name of the group. Unless enclosed inputs specify a name, this name is used as the name of the\n     * enclosed inputs. If not specified, a name is generated automatically.\n     */\n    name: string;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    onRadioChange(radio: NgbRadio): void;\n    onRadioValueUpdate(): void;\n    register(radio: NgbRadio): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n    unregister(radio: NgbRadio): void;\n    writeValue(value: any): void;\n    private _updateRadiosValue;\n    private _updateRadiosDisabled;\n}\n/**\n * Marks an input of type \"radio\" as part of the NgbRadioGroup.\n */\nexport declare class NgbRadio implements OnDestroy {\n    private _group;\n    private _label;\n    private _renderer;\n    private _element;\n    private _cd;\n    private _checked;\n    private _disabled;\n    private _value;\n    /**\n     * The name of the input. All inputs of a group should have the same name. If not specified,\n     * the name of the enclosing group is used.\n     */\n    name: string;\n    /**\n     * You can specify model value of a given radio by binding to the value property.\n     */\n    value: any;\n    /**\n     * A flag indicating if a given radio button is disabled.\n     */\n    disabled: boolean;\n    focused: boolean;\n    readonly checked: boolean;\n    readonly nameAttr: string;\n    constructor(_group: NgbRadioGroup, _label: NgbButtonLabel, _renderer: Renderer2, _element: ElementRef<HTMLInputElement>, _cd: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    onChange(): void;\n    updateValue(value: any): void;\n    updateDisabled(): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;"}